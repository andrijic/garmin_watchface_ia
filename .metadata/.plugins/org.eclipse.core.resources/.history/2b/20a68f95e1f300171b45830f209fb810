using Toybox.WatchUi as Ui;
using Toybox.Graphics as Gfx;
using Toybox.Time.Gregorian; 
using Toybox.Application;
using Toybox.Math;
using Toybox.System;

var timer1 = null;
var stepsCount = 0;
var accel = null;
var inited = false;
var last_x = 0;
var last_y = 0;
var last_z = 0;
var SENSITIVITY = 500;
var FASTESTSTEPMILLIS = 0;
var direction_changed_time = System.getTimer();
var last_direction = 0;
var last_delta = 0;
var engaged = false;

class EllipticalView extends Ui.View {
    
    function secondPassedEvent(){
    	var info = Sensor.getInfo();
    	
    	accel = info.accel;
    	
    	
	    	if (info has :accel && info.accel != null) {
		    	var x_accel = accel[0];
		    	var y_accel = accel[1];
		    	var z_accel = accel[2];		    	
		    	var new_delta = Math.floor((last_x - x_accel)/SENSITIVITY)
		    	
		    	if(inited == false){
		    		last_x = x_accel;
		    		last_y = y_accel;
		    		last_z = z_accel;
		    		inited = true;
		    	}
		    	
		    	if(
		    			Math.floor((last_x - x_accel)/SENSITIVITY) != 0 /*||
		    			Math.floor((last_y - y_accel)/SENSITIVITY) != 0 ||
		    			Math.floor((last_z - z_accel)/SENSITIVITY) != 0 */){
		    			
		    		if(System.getTimer() - direction_changed_time >= FASTESTSTEPMILLIS){
		    			if(new_delta < last_delta && engaged == false){
		    				stepsCount++;
		    				engaged = true;
		    			}			
		    		}
		    			
		    		last_x = x_accel;
		    		last_y = y_accel;
		    		last_z = z_accel;
		    		last_delta = new_delta; //will have sign
		    		direction_changed_time = System.getTimer();
		    	}
	    	}
	    
	    
		Ui.requestUpdate();
	}
	
	function initialize() {
        View.initialize();
    }
    
    function getDebugData(){
    	
    		return last_x+", "+last_y+", "+last_z;
    	
    }
	

    // Load your resources here
    function onLayout(dc) {
        setLayout(Rez.Layouts.MainLayout(dc));
        
        if(timer1 == null){
	    	System.println("start timer");
	    	timer1 = new Timer.Timer();
        	timer1.start(method(:secondPassedEvent), 50, true);
        }
    }

    // Called when this View is brought to the foreground. Restore
    // the state of this View and prepare it to be shown. This includes
    // loading resources into memory.
    function onShow() {
    }

    // Update the view
    function onUpdate(dc) {
        // Call the parent onUpdate function to redraw the layout
        View.onUpdate(dc);
        
        dc.setColor(Gfx.COLOR_BLACK, Gfx.COLOR_WHITE  );
        dc.clear();
        dc.setColor(Gfx.COLOR_DK_BLUE, Gfx.COLOR_TRANSPARENT);
        
        dc.drawText( dc.getWidth()/2, (dc.getHeight() / 2) - 20, Gfx.FONT_LARGE, stepsCount, Gfx.TEXT_JUSTIFY_CENTER );
        dc.drawText( dc.getWidth()/2, (dc.getHeight() / 2)+10, Gfx.FONT_SMALL, getDebugData(), Gfx.TEXT_JUSTIFY_CENTER );
    }

    // Called when this View is removed from the screen. Save the
    // state of this View here. This includes freeing resources from
    // memory.
    function onHide() {
    }

}
